% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GBAT.process_intersection_addresses.R
\name{GBAT.process_intersection_addresses}
\alias{GBAT.process_intersection_addresses}
\title{Geocode a data frame of NYC intersection addresses with a user selected release or version of DCP's Geosupport.}
\usage{
GBAT.process_intersection_addresses(in_df,  
    street1_col_name, street2_col_name, source_cols, 
    geocode_fields, boro_code2_col_name = NULL, 
    com_dir_col_name=NULL, return_type = "all", GBAT_name)
}
\arguments{
\item{in_df}{a data frame containing NYC intersection addresses.  Required.}

\item{street1_col_name}{the name of the first street column as string.  Required.}

\item{street2_col_name}{the name of the second street column as string.  Required.}

\item{boro_code1_col_name}{the name of the first borough code column as string.  Required.}

\item{source_cols}{vector of column names from the input data frame to be returned with geocoder results.  Required.}

\item{geocode_fields}{vector of field names generated by the geocoder to be returned with geocoder results.  Required.}

\item{boro_code2_col_name}{the name of the second borough code column as string.  Optional.}

\item{com_dir_col_name}{the name of the compass direction column as string.  Optional.}

\item{return_type}{option to exclude address which failed to geocode from output as string.  Optional.}

\item{GBAT_name}{the release or version of DCP's Geosupport geocoding software as string.  Required.}
}
\value{
A data frame containing the columns specified in \code{source_cols} plus the geocoder return fields specified in \code{geocode_fields}.
}
\description{
The \code{parallel.GBAT.process_intersection_addresses} function allows the user to select a release or version of DCP's Geosupport to  geocode a data frame of NYC intersection addresses where two streets names and at least one borough code are provided.  It aggregates, duplicates, geocodes using parallel processing, and then merges the geocoded results back to the original data frame.  The \code{parallel.GBAT.process_intersection_addresses} function utilizes Geosupport function 2.
}
\details{
Geosupport can be downloaded from \href{https://www1.nyc.gov/site/planning/data-maps/open-data.page#geocoding_application}{DCP BYTES of the BIG APPLE}. Excellent documentation is provide in the \href{https://nycplanning.github.io/Geosupport-UPG/}{Geosupport System User Programming Guide}. The geocoder return fields are described in \href{https://nycplanning.github.io/Geosupport-UPG/appendices/appendix13/}{Appendix 13 of the Geosupport System User Programming Guide}.
}
\examples{
#create a data frame of intersection addresses
street1 <- c(paste("EAST",1:220,"ST",sep=" "),paste("WEST",1:220,"ST",sep=" "))
street2 <- c(paste(1:11,"AVE",sep=" "),paste("AVE",c("A","B","C","D"),sep=" "))
df = expand.grid(street1 = street1, street2 = street2)
df$boro <- 1
df$u_id <- 1:nrow(df)

#specify columns from input data frame to retain
source_cols <- c('u_id')

#specify geocoder return fields
geocode_fields <- c("F2.output.st1.Street_name",
    "F2.output.st2.Street_name","F2.zip_code","F2.coord1",
    "F2.coord2","F2.USCB_tract_90", "F2.USCB_tract_2000",
    "F2.USCB_tract_10", "F2.com_dist","F2.output.ret_code",
    "F2.output.msg")

#geocode the data frame
df_gc <- GBAT.process_intersection_addresses(df, 
    "street1", "street2", "boro", source_cols, geocode_fields, NULL, 
    NULL, "all", "18C")
}
