% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.GBAT.process_BBL.R
\name{parallel.GBAT.process_BBL}
\alias{parallel.GBAT.process_BBL}
\title{Geocode an extremely large data frame containing a column of BBL with a user selected release or version of DCP's Geosupport.}
\usage{
parallel.GBAT.process_BBL(in_clus, in_df, bbl_col_name, 
    source_cols, geocode_fields, return_type = "all", GBAT_name)
}
\arguments{
\item{in_clus}{the number of clusters available to the function as integer.  Required.}

\item{in_df}{a data frame containing NYC addresses.  Required.}

\item{bbl_col_name}{the name of the column containing the input BBL as string.  Required.}

\item{source_cols}{vector of column names from the input data frame to be returned with geocoder results.  Required.}

\item{geocode_fields}{vector of field names generated by the geocoder to be returned with geocoder results.  Required.}

\item{return_type}{option to exclude address which failed to geocode from output as string.  Optional.}

\item{GBAT_name}{the release or version of DCP's Geosupport geocoding software as string.  Required.}
}
\value{
A data frame containing the columns specified in \code{source_cols} plus the geocoder return fields specified in \code{geocode_fields}.
}
\description{
The \code{parallel.GBAT.process_BBL} function allows the user to select a release or version of DCP's Geosupport to more efficiently geocode large data frames (+10,000 records) containing a column of BBL (borough-block-lot) tax lot identifiers.  It aggregates duplicates, geocodes using parallel processing, and then merges the geocoded results back to the original data frame.  The \code{parallel.GBAT.process_BBL} function utilizes Geosupport function BL.
}
\details{
Geosupport can be downloaded from \href{https://www1.nyc.gov/site/planning/data-maps/open-data.page#geocoding_application}{DCP BYTES of the BIG APPLE}. Excellent documentation is provide in the \href{https://nycplanning.github.io/Geosupport-UPG/}{Geosupport System User Programming Guide}. The geocoder return fields are described in \href{https://nycplanning.github.io/Geosupport-UPG/appendices/appendix13/}{Appendix 13 of the Geosupport System User Programming Guide}.
}
\examples{
#create a large data frame of BBL
in_bbl <- 1001990021
BBL <- as.character((in_bbl-10000):(in_bbl+10000))
u_id <- 1:length(BBL)
df = data.frame(u_id, BBL)

#specify columns from input data frame to retain
source_cols <- c('u_id')

#specify geocoder return fields
geocode_fields <- c("FBL.bbl", "FBL.RPAD_lucc", "FBL.coord1", "FBL.coord2", 
    "FBL.latitude", "FBL.longitude", "FBL.nbr_blds", "FBL.addr_range_1ax1.bin", 
    "FBL.addr_range_1ax2.bin","FBL.addr_range_1ax3.bin")

#compare times to geocode a large data frame
#with five cores
system.time({ df_gc1 <- parallel.GBAT.process_BBL(in_clus=5, in_df=df, 
    bbl_col_name='BBL', source_cols=source_cols, geocode_fields=geocode_fields, 
    return_type="all", GBAT_name="20C")})

#with one core
system.time({ df_gc2 <- GBAT.process_BBL(in_df=df, bbl_col_name='BBL', 
    source_cols=source_cols, geocode_fields=geocode_fields,
    return_type="all", GBAT_name="20C")})
}
