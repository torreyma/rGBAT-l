% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.GBAT.process_BIN.R
\name{parallel.GBAT.process_BIN}
\alias{parallel.GBAT.process_BIN}
\title{Geocode an extremely large data frame containing a column of BIN with a user selected release or version of DCP's Geosupport.}
\usage{
parallel.GBAT.process_BIN(in_clus, in_df, bin_col_name, 
    source_cols, geocode_fields, return_type = "all", GBAT_name)
}
\arguments{
\item{in_clus}{the number of clusters available to the function as integer.  Required.}

\item{in_df}{a data frame containing NYC addresses.  Required.}

\item{bin_col_name}{the name of the column containing the input BIN as string.  Required.}

\item{source_cols}{vector of column names from the input data frame to be returned with geocoder results.  Required.}

\item{geocode_fields}{vector of field names generated by the geocoder to be returned with geocoder results.  Required.}

\item{return_type}{option to exclude address which failed to geocode from output as string.  Optional.}

\item{GBAT_name}{the release or version of DCP's Geosupport geocoding software as string.  Required.}
}
\value{
A data frame containing the columns specified in \code{source_cols} plus the geocoder return fields specified in \code{geocode_fields}.
}
\description{
The \code{parallel.GBAT.process_BIN} function allows the user to select a release or version of DCP's Geosupport to more efficiently geocode large data frames (+10,000 records) containing a column of BIN (building identification number).  It aggregates duplicates, geocodes using parallel processing, and then merges the geocoded results back to the original data frame.  The \code{parallel.GBAT.process_BIN} function utilizes Geosupport function BN.
}
\details{
Geosupport can be downloaded from \href{https://www1.nyc.gov/site/planning/data-maps/open-data.page#geocoding_application}{DCP BYTES of the BIG APPLE}. Excellent documentation is provide in the \href{https://nycplanning.github.io/Geosupport-UPG/}{Geosupport System User Programming Guide}. The geocoder return fields are described in \href{https://nycplanning.github.io/Geosupport-UPG/appendices/appendix13/}{Appendix 13 of the Geosupport System User Programming Guide}.
}
\examples{
#create a large data frame of BIN
in_bin <- 1002376
BIN <- as.character((in_bin-10000):(in_bin+10000))
u_id <- 1:length(BIN)
df = data.frame(u_id, BIN)

#specify columns from input data frame to retain
source_cols <- c('u_id')

#specify geocoder return fields
geocode_fields <- c("FBN.bbl", "FBN.bin", "FBN.RPAD_lucc",
    "FBN.addr_range_1ax1.bin","FBN.addr_range_1ax1.lo_hse_nbr",
    "FBN.addr_range_1ax1.hi_hse_nbr","FBN.addr_range_1ax1.st_name",
    "FBN.addr_range_1ax2.bin","FBN.addr_range_1ax2.lo_hse_nbr",
    "FBN.addr_range_1ax2.hi_hse_nbr","FBN.addr_range_1ax2.st_name",
    "FBN.addr_range_1ax3.bin","FBN.addr_range_1ax3.lo_hse_nbr",
    "FBN.addr_range_1ax3.hi_hse_nbr","FBN.addr_range_1ax3.st_name")

#compare times to geocode a large data frame
#with five cores
system.time({ df_gc1 <- parallel.GBAT.process_BIN(in_clus=5, in_df=df, 
    bin_col_name='BIN', source_cols=source_cols, geocode_fields=geocode_fields, 
    return_type="all", GBAT_name="24B")})

#with one core
system.time({ df_gc2 <- GBAT.process_BIN(in_df=df, bin_col_name='BIN', 
    source_cols=source_cols, geocode_fields=geocode_fields,
    return_type="all", GBAT_name="24B")})
}
