% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.GBAT.process_freeform_addresses.R
\name{parallel.GBAT.process_freeform_addresses}
\alias{parallel.GBAT.process_freeform_addresses}
\title{Geocode an extremely large data frame of freeform NYC addresses with a user selected release or version of DCP's Geosupport.}
\usage{
parallel.GBAT.process_freeform_addresses(in_clus, in_df,  
    addr_col_name, unit_col_name = NULL, third_col_name, source_cols, 
    geocode_fields, third_col_type = "boro_code", 
    return_type = "all", GBAT_name)
}
\arguments{
\item{in_clus}{the number of clusters available to the function as integer.  Required.}

\item{in_df}{a data frame containing NYC addresses.  Required.}

\item{addr_col_name}{the name of the input addresses column as string.  Required.}

\item{unit_col_name}{the name of the unit column as string.  Only available for Geosupport version 16D and later. Optional.}

\item{third_col_name}{the name of either the borough code or zip code column as string.  Required.}

\item{source_cols}{vector of column names from the input data frame to be returned with geocoder results.  Required.}

\item{geocode_fields}{vector of field names generated by the geocoder to be returned with geocoder results.  Required.}

\item{third_col_type}{either \code{"boro_code"} or \code{"zip_code"} as string.  Required.}

\item{return_type}{option to exclude address which failed to geocode from output as string.  Optional.}

\item{GBAT_name}{the release or version of DCP's Geosupport geocoding software as string.  Required.}
}
\value{
A data frame containing the columns specified in \code{source_cols} plus the geocoder return fields specified in \code{geocode_fields}.
}
\description{
The \code{parallel.GBAT.process_freeform_addresses} function allows the user to select a release or version of DCP's Geosupport to more efficiently geocode large data frames (+10,000 records) of freeform NYC addresses where house number and street name are together in one column.  It aggregates, duplicates, geocodes using parallel processing, and then merges the geocoded results back to the original data frame.  The \code{parallel.GBAT.process_freeform_addresses} function utilizes Geosupport functions 1A, 1E, and AP.
}
\details{
Geosupport can be downloaded from \href{https://www1.nyc.gov/site/planning/data-maps/open-data.page#geocoding_application}{DCP BYTES of the BIG APPLE}. Excellent documentation is provide in the \href{https://nycplanning.github.io/Geosupport-UPG/}{Geosupport System User Programming Guide}. The geocoder return fields are described in \href{https://nycplanning.github.io/Geosupport-UPG/appendices/appendix13/}{Appendix 13 of the Geosupport System User Programming Guide}.
}
\examples{
#create a large data frame of addresses
ADDR <- c(paste(1:5000,"BROADWAY"),paste(1:2400,"1 AVE"),
    paste(1:3400,"ATLANTIC AVE"), paste(1:3400,"FULTON ST"))
BORO_CODE <- ifelse(grepl("ATLANTIC|FULTON",ADDR),3,1)
u_id <- 1:length(ADDR)
df = data.frame(u_id, ADDR, BORO_CODE)

#specify columns from input data frame to retain
source_cols <- c('u_id')

#specify geocoder return fields
geocode_fields <- c('F1E.output.bin','F1E.output.bbl','F1E.longitude',
    'F1E.latitude','JN.ZCTA_10','F1E.output.ret_code','F1E.output.msg')

#compare times to geocode a large data frame
#with five cores
system.time({ df_gc1 <- parallel.GBAT.process_freeform_addresses(in_clus=5, in_df=df, 
    addr_col_name="ADDR", third_col_name='BORO_CODE', source_cols=source_cols, 
    geocode_fields=geocode_fields, third_col_type="boro_code", return_type="all",
    GBAT_name="20C")})

#with one core
system.time({ df_gc2 <- GBAT.process_freeform_addresses(in_df=df, addr_col_name="ADDR", 
    third_col_name='BORO_CODE', source_cols=source_cols, geocode_fields=geocode_fields,
    third_col_type="boro_code", return_type="all", GBAT_name="20C")})
}
